// <auto-generated />
using System;
using LearnLangs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearnLangs.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LearnLangs.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("int");

                    b.Property<string>("DefaultPronunciationLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultTranslateFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultTranslateTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Has30DayStreakReward")
                        .HasColumnType("bit");

                    b.Property<bool>("Has7DayStreakReward")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PreferredUiTheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowPronunciationRawJson")
                        .HasColumnType("bit");

                    b.Property<int>("TotalXP")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LearnLangs.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Basics of Spanish",
                            Name = "Spanish – Beginner"
                        },
                        new
                        {
                            Id = 100,
                            Description = "Beginner Mandarin: greetings, numbers, self-intro with pinyin.",
                            Name = "Chinese course"
                        });
                });

            modelBuilder.Entity("LearnLangs.Models.Dictation.DictationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<string>("Transcript")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SetId", "OrderIndex");

                    b.ToTable("DictationItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2101,
                            AudioUrl = "/audio/demo1.mp3",
                            OrderIndex = 1,
                            SetId = 2100,
                            Transcript = "I've been meaning to ask you for some advice about restaurants."
                        },
                        new
                        {
                            Id = 2102,
                            AudioUrl = "/audio/demo2.mp3",
                            OrderIndex = 2,
                            SetId = 2100,
                            Transcript = "I need to book somewhere to celebrate my sister's thirtieth birthday."
                        });
                });

            modelBuilder.Entity("LearnLangs.Models.Dictation.DictationSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId", "OrderIndex");

                    b.ToTable("DictationSets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2100,
                            Level = "B2",
                            OrderIndex = 1,
                            Title = "Cam 20 – Test 1 – Part 1 (Demo)",
                            TopicId = 2000
                        });
                });

            modelBuilder.Entity("LearnLangs.Models.Dictation.DictationTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DictationTopics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2000,
                            CoverUrl = "/img/ielts.png",
                            Description = "Mini demo",
                            Title = "IELTS Listening (Demo)"
                        });
                });

            modelBuilder.Entity("LearnLangs.Models.Dictation.UserDictationProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrectCount")
                        .HasColumnType("int");

                    b.Property<int>("LastIndex")
                        .HasColumnType("int");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "SetId")
                        .IsUnique();

                    b.ToTable("UserDictationProgresses", (string)null);
                });

            modelBuilder.Entity("LearnLangs.Models.Flashcards.FlashcardCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackMeaningVi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<string>("ExampleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExampleVi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ipa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Phonetic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeckId", "OrderIndex");

                    b.ToTable("FlashcardCards", (string)null);
                });

            modelBuilder.Entity("LearnLangs.Models.Flashcards.FlashcardDeck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Mode", "OrderIndex");

                    b.ToTable("FlashcardDecks", (string)null);
                });

            modelBuilder.Entity("LearnLangs.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId", "OrderIndex")
                        .IsUnique();

                    b.ToTable("Lessons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            OrderIndex = 1,
                            Title = "Greetings",
                            XpReward = 10
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            OrderIndex = 2,
                            Title = "Numbers",
                            XpReward = 10
                        },
                        new
                        {
                            Id = 101,
                            CourseId = 100,
                            OrderIndex = 1,
                            Title = "Lesson 1 – Greetings",
                            XpReward = 30
                        },
                        new
                        {
                            Id = 102,
                            CourseId = 100,
                            OrderIndex = 2,
                            Title = "Lesson 2 – Numbers 1–10",
                            XpReward = 30
                        },
                        new
                        {
                            Id = 103,
                            CourseId = 100,
                            OrderIndex = 3,
                            Title = "Lesson 3 – Self-Introduction",
                            XpReward = 40
                        });
                });

            modelBuilder.Entity("LearnLangs.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FillInTheBlankAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMultipleChoice")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("OptionA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ShortAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Questions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectAnswer = "A",
                            IsMultipleChoice = true,
                            LessonId = 1,
                            OptionA = "Hello",
                            OptionB = "Goodbye",
                            OptionC = "Please",
                            OptionD = "Thanks",
                            Prompt = "Hola = ?"
                        },
                        new
                        {
                            Id = 2,
                            CorrectAnswer = "B",
                            IsMultipleChoice = true,
                            LessonId = 2,
                            OptionA = "One",
                            OptionB = "Two",
                            OptionC = "Three",
                            OptionD = "Four",
                            Prompt = "Dos = ?"
                        },
                        new
                        {
                            Id = 1001,
                            CorrectAnswer = "B",
                            IsMultipleChoice = true,
                            LessonId = 101,
                            OptionA = "Tạm biệt",
                            OptionB = "Xin chào",
                            OptionC = "Cảm ơn",
                            OptionD = "Xin lỗi",
                            Prompt = "“你好” nghĩa là gì?"
                        },
                        new
                        {
                            Id = 1002,
                            CorrectAnswer = "A",
                            IsMultipleChoice = true,
                            LessonId = 101,
                            OptionA = "Chào buổi sáng",
                            OptionB = "Chúc ngủ ngon",
                            OptionC = "Chúc mừng",
                            OptionD = "Hẹn gặp lại",
                            Prompt = "“早上好” nghĩa là…"
                        },
                        new
                        {
                            Id = 1003,
                            CorrectAnswer = "B",
                            IsMultipleChoice = true,
                            LessonId = 101,
                            OptionA = "Bạn tên gì?",
                            OptionB = "Bạn khỏe không?",
                            OptionC = "Bạn ở đâu?",
                            OptionD = "Bạn bao nhiêu tuổi?",
                            Prompt = "“你好吗？” nghĩa là…"
                        },
                        new
                        {
                            Id = 1004,
                            CorrectAnswer = "A",
                            IsMultipleChoice = true,
                            LessonId = 101,
                            OptionA = "我很好，谢谢。",
                            OptionB = "对不起。",
                            OptionC = "再见。",
                            OptionD = "没关系。",
                            Prompt = "Trả lời lịch sự cho “你好吗？”"
                        },
                        new
                        {
                            Id = 1005,
                            CorrectAnswer = "B",
                            IsMultipleChoice = true,
                            LessonId = 101,
                            OptionA = "Cảm ơn",
                            OptionB = "Tạm biệt",
                            OptionC = "Xin chào",
                            OptionD = "Không sao",
                            Prompt = "“再见” nghĩa là…"
                        },
                        new
                        {
                            Id = 1011,
                            CorrectAnswer = "B",
                            IsMultipleChoice = true,
                            LessonId = 102,
                            OptionA = "3",
                            OptionB = "4",
                            OptionC = "5",
                            OptionD = "6",
                            Prompt = "Số “四” là số nào?"
                        },
                        new
                        {
                            Id = 1012,
                            CorrectAnswer = "A",
                            IsMultipleChoice = true,
                            LessonId = 102,
                            OptionA = "bā",
                            OptionB = "bá",
                            OptionC = "bǎ",
                            OptionD = "bà",
                            Prompt = "Pinyin đúng của “八” là…"
                        },
                        new
                        {
                            Id = 1013,
                            CorrectAnswer = "D",
                            IsMultipleChoice = true,
                            LessonId = 102,
                            OptionA = "6",
                            OptionB = "7",
                            OptionC = "8",
                            OptionD = "9",
                            Prompt = "“九” là…"
                        },
                        new
                        {
                            Id = 1014,
                            CorrectAnswer = "A",
                            IsMultipleChoice = true,
                            LessonId = 102,
                            OptionA = "六",
                            OptionB = "九",
                            OptionC = "二",
                            OptionD = "十",
                            Prompt = "“liù” viết Hán tự là…"
                        },
                        new
                        {
                            Id = 1015,
                            CorrectAnswer = "C",
                            IsMultipleChoice = true,
                            LessonId = 102,
                            OptionA = "百",
                            OptionB = "千",
                            OptionC = "十",
                            OptionD = "万",
                            Prompt = "Số “10” trong tiếng Trung là…"
                        },
                        new
                        {
                            Id = 1021,
                            CorrectAnswer = "C",
                            IsMultipleChoice = true,
                            LessonId = 103,
                            OptionA = "Nói tuổi",
                            OptionB = "Nói quê quán",
                            OptionC = "Nói tên",
                            OptionD = "Nói nghề nghiệp",
                            Prompt = "“我叫…” dùng khi nào?"
                        },
                        new
                        {
                            Id = 1022,
                            CorrectAnswer = "A",
                            IsMultipleChoice = true,
                            LessonId = 103,
                            OptionA = "你叫什么名字？",
                            OptionB = "你多大？",
                            OptionC = "你来自哪里？",
                            OptionD = "你做什么工作？",
                            Prompt = "Câu hỏi để hỏi tên người khác:"
                        },
                        new
                        {
                            Id = 1023,
                            CorrectAnswer = "A",
                            IsMultipleChoice = true,
                            LessonId = 103,
                            OptionA = "Tôi đến từ Việt Nam",
                            OptionB = "Tôi yêu Việt Nam",
                            OptionC = "Tôi ở Việt Nam",
                            OptionD = "Tôi nói tiếng Việt",
                            Prompt = "“我来自越南。” nghĩa là…"
                        },
                        new
                        {
                            Id = 1024,
                            CorrectAnswer = "B",
                            IsMultipleChoice = true,
                            LessonId = 103,
                            OptionA = "I am a teacher",
                            OptionB = "I am a student",
                            OptionC = "I am from China",
                            OptionD = "My name is…",
                            Prompt = "“我是学生。” tương đương…"
                        },
                        new
                        {
                            Id = 1025,
                            CorrectAnswer = "C",
                            IsMultipleChoice = true,
                            LessonId = 103,
                            OptionA = "Cảm ơn",
                            OptionB = "Xin lỗi",
                            OptionC = "Rất vui được gặp bạn",
                            OptionD = "Hẹn gặp lại",
                            Prompt = "“很高兴认识你。” nghĩa là…"
                        });
                });

            modelBuilder.Entity("LearnLangs.Models.UserLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId", "LessonId")
                        .IsUnique();

                    b.ToTable("UserLessons", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LearnLangs.Models.Dictation.DictationItem", b =>
                {
                    b.HasOne("LearnLangs.Models.Dictation.DictationSet", "Set")
                        .WithMany("Items")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Set");
                });

            modelBuilder.Entity("LearnLangs.Models.Dictation.DictationSet", b =>
                {
                    b.HasOne("LearnLangs.Models.Dictation.DictationTopic", "Topic")
                        .WithMany("Sets")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("LearnLangs.Models.Flashcards.FlashcardCard", b =>
                {
                    b.HasOne("LearnLangs.Models.Flashcards.FlashcardDeck", "Deck")
                        .WithMany("Cards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("LearnLangs.Models.Lesson", b =>
                {
                    b.HasOne("LearnLangs.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LearnLangs.Models.Question", b =>
                {
                    b.HasOne("LearnLangs.Models.Lesson", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("LearnLangs.Models.UserLesson", b =>
                {
                    b.HasOne("LearnLangs.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnLangs.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LearnLangs.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LearnLangs.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnLangs.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LearnLangs.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearnLangs.Models.Course", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("LearnLangs.Models.Dictation.DictationSet", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("LearnLangs.Models.Dictation.DictationTopic", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("LearnLangs.Models.Flashcards.FlashcardDeck", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("LearnLangs.Models.Lesson", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
