@using LearnLangs.Models.Flashcards
@model PlayDeckVM

@{
    ViewData["Title"] = $"Flashcard – {Model.DeckTitle}";
}

<div class="container-xxl">
    <div class="d-flex align-items-center justify-content-between mb-3">
        <h3 class="mb-0">@Model.DeckTitle</h3>
        <div>
            <span class="badge bg-secondary-subtle text-secondary me-2">
                Part @Model.Part / @Model.TotalParts
            </span>
            <a class="btn btn-outline-secondary btn-sm" asp-action="Index" asp-route-mode="@Model.Mode">
                <i class="bi bi-arrow-left"></i> Back
            </a>
        </div>
    </div>

    <div class="row g-4">
        <div class="col-12 col-lg-3">
            <div class="list-group sticky-top" style="top: 6rem;">
                @for (int p = 1; p <= Model.TotalParts; p++)
                {
                    <a class="list-group-item list-group-item-action @(p==Model.Part?"active":"")"
                       asp-action="Play" asp-route-id="@Model.DeckId" asp-route-part="@p">
                        Part @p
                    </a>
                }
            </div>
        </div>

        <div class="col-12 col-lg-9">
            @if (!Model.Cards.Any())
            {
                <div class="alert alert-info">Chưa có thẻ trong phần này.</div>
            }
            else
            {
                <div id="fc-player" class="card shadow-sm">
                    @* FIX: Bỏ code bị lặp 2 lần *@
                    @if (!string.IsNullOrWhiteSpace(Model.CoverUrl))
                    {
                        <div class="player-cover d-none d-md-block">
                            <img src="@Model.CoverUrl" alt="@Model.DeckTitle" />
                        </div>
                    }

                    <div class="card-body text-center">
                        @* Mặt trước *@
                        <div id="face-front">
                            <button id="btnSpeak" class="btn btn-outline-primary btn-sm mb-2" title="Phát âm">
                                <i class="bi bi-volume-up"></i>
                            </button>

                            <h4 class="mb-1" id="word">Loading...</h4>
                            <div class="text-muted" id="pos"></div>
                            <div class="text-secondary" id="ipa"></div>
                        </div>

                        @* Mặt sau *@
                        <div id="face-back" class="d-none">
                            <h5 id="meaning" class="mb-2"></h5>
                            <div id="ex-en" class="mb-1"></div>
                            <div id="ex-vi" class="text-secondary"></div>
                        </div>

                        @* Buttons *@
                        <div class="mt-3 d-flex justify-content-center gap-2">
                            <button id="btnFlip" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-repeat"></i> Turn
                            </button>
                            <button id="btnKnown" class="btn btn-success">
                                <i class="bi bi-check2"></i> Đã biết
                            </button>
                            <button id="btnNext" class="btn btn-primary">
                                Next <i class="bi bi-chevron-right"></i>
                            </button>
                        </div>

                        @* Progress *@
                        <div class="small text-muted mt-3">
                            <span id="progress">Card 1 of @Model.Cards.Count</span>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (function() {
            'use strict';

            console.log('=== Flashcard Player Init ===');

            // ===== Data từ server =====
            let cardsData;
            try {
                cardsData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Cards));
                console.log('Cards loaded:', cardsData);
                console.log('Total cards:', cardsData?.length || 0);
            } catch (err) {
                console.error('ERROR parsing cards data:', err);
                alert('Lỗi tải dữ liệu thẻ. Vui lòng refresh lại trang.');
                return;
            }

            if (!cardsData || !Array.isArray(cardsData) || cardsData.length === 0) {
                console.error('No cards data available');
                return;
            }

            const cards = cardsData;
            let idx = 0;

            // ===== DOM Elements =====
            const elWord = document.getElementById('word');
            const elPos = document.getElementById('pos');
            const elIpa = document.getElementById('ipa');
            const elMeaning = document.getElementById('meaning');
            const elExEn = document.getElementById('ex-en');
            const elExVi = document.getElementById('ex-vi');
            const elFront = document.getElementById('face-front');
            const elBack = document.getElementById('face-back');
            const elProg = document.getElementById('progress');

            // Kiểm tra elements tồn tại
            if (!elWord || !elFront || !elBack) {
                console.error('ERROR: Required DOM elements not found');
                return;
            }

            // ===== Render Function =====
            function render(i) {
                if (!cards || !cards.length) {
                    console.error('No cards to render');
                    return;
                }

                const c = cards[i];
                console.log('Rendering card', i + 1, ':', c);

                // Hỗ trợ cả lowercase và PascalCase properties
                elWord.textContent = c.word || c.Word || '[No word]';
                elPos.textContent = c.pos || c.Pos || '';
                elIpa.textContent = c.ipa || c.Ipa || c.phonetic || c.Phonetic || '';
                elMeaning.textContent = c.meaningVi || c.MeaningVi || '[No meaning]';
                elExEn.textContent = c.exampleEn || c.ExampleEn || '';
                elExVi.textContent = c.exampleVi || c.ExampleVi || '';
                elProg.textContent = 'Card ' + (i + 1) + ' of ' + cards.length;

                // Reset về mặt trước
                elFront.classList.remove('d-none');
                elBack.classList.add('d-none');
            }

            // ===== Event: Flip Card =====
            const btnFlip = document.getElementById('btnFlip');
            if (btnFlip) {
                btnFlip.addEventListener('click', function() {
                    elFront.classList.toggle('d-none');
                    elBack.classList.toggle('d-none');
                });
            }

            // ===== Event: Next Card =====
            const btnNext = document.getElementById('btnNext');
            if (btnNext) {
                btnNext.addEventListener('click', function() {
                    idx = (idx + 1) % cards.length;
                    render(idx);
                });
            }

            // ===== Event: Mark as Known =====
            const btnKnown = document.getElementById('btnKnown');
            if (btnKnown) {
                btnKnown.addEventListener('click', async function() {
                    try {
                        const cardId = cards[idx].id || cards[idx].Id;
                        if (!cardId) {
                            console.warn('Card ID not found');
                        } else {
                            const form = new FormData();
                            form.append('cardId', cardId);
                            form.append('known', 'true');
                            await fetch('/Flashcards/MarkKnown', {
                                method: 'POST',
                                body: form
                            });
                            console.log('Card marked as known:', cardId);
                        }
                    } catch (err) {
                        console.error('Error marking known:', err);
                    }

                    // Chuyển sang thẻ tiếp theo
                    idx = (idx + 1) % cards.length;
                    render(idx);
                });
            }

            // ===== Event: Text-to-Speech =====
            const btnSpeak = document.getElementById('btnSpeak');
            if (btnSpeak) {
                btnSpeak.addEventListener('click', function() {
                    try {
                        const c = cards[idx];
                        const text = c.word || c.Word || '';

                        if (!text) {
                            console.warn('No text to speak');
                            return;
                        }

                        // Hủy speech đang chạy (nếu có)
                        speechSynthesis.cancel();

                        const utterance = new SpeechSynthesisUtterance(text);
                        utterance.lang = '@Model.Mode' === 'hsk' ? 'zh-CN' : 'en-US';
                        utterance.rate = 0.9; // Nói chậm hơn một chút

                        speechSynthesis.speak(utterance);
                        console.log('Speaking:', text);
                    } catch (err) {
                        console.error('Speech error:', err);
                    }
                });
            }

            // ===== Initialize =====
            console.log('Starting first render...');
            render(idx);
            console.log('=== Flashcard Player Ready ===');
        })();
    </script>
}