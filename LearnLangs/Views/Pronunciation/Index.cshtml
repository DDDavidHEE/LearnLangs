@model LearnLangs.Models.PronunciationInputModel
@{
    ViewData["Title"] = "Pronunciation Practice";
}

<!-- ================= Styles (Google-ish, no  ================= -->
<style>
    :root {
        --bg: #f8f9fa;
        --card: #fff;
        --ink: #202124; /* Google gray 900 */
        --sub: #5f6368; /* Google gray 600 */
        --primary: #1a73e8; /* Google blue */
        --primary-ink: #0b57d0;
        --border: #e0e3e7;
        --radius: 14px;
        --shadow: 0 1px 2px rgba(60,64,67,.3), 0 2px 6px rgba(60,64,67,.15);
        --shadow-sm: 0 1px 2px rgba(60,64,67,.18);
        --focus: 0 0 0 3px rgba(26,115,232,.18);
    }

    body {
        background: var(--bg);
        color: var(--ink);
    }

    .container {
        max-width: 920px;
        margin: 28px auto 64px;
        padding: 0 20px;
    }

    .page-title {
        font-size: 34px;
        font-weight: 700;
        letter-spacing: .2px;
        margin: 8px 0 22px;
    }

    .card {
        background: var(--card);
        border: 1px solid var(--border);
        border-radius: var(--radius);
        box-shadow: var(--shadow);
        padding: 20px;
        margin-bottom: 18px;
    }

    .row {
        display: grid;
        grid-template-columns: 1fr;
        gap: 14px;
    }
    /* Keep simple grid; no media-query */

    /* Buttons */
    .btn {
        appearance: none;
        border: 1px solid transparent;
        background: var(--primary);
        color: #fff;
        padding: 10px 16px;
        font-weight: 600;
        border-radius: 28px;
        cursor: pointer;
        transition: transform .04s ease, box-shadow .2s ease, background .2s ease, border-color .2s ease;
        box-shadow: var(--shadow-sm);
    }

        .btn:hover {
            background: var(--primary-ink);
        }

        .btn:active {
            transform: translateY(1px);
        }

        .btn[disabled] {
            opacity: .55;
            cursor: not-allowed;
            box-shadow: none;
        }

    .btn-outline {
        background: #fff;
        color: var(--ink);
        border-color: var(--border);
    }

        .btn-outline:hover {
            border-color: var(--primary);
            color: var(--primary-ink);
        }

    /* Controls bar */
    .controls {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    .chip {
        border: 1px solid var(--border);
        color: var(--sub);
        background: #fff;
        padding: 6px 10px;
        border-radius: 999px;
        font-size: 13px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .chip .dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--sub);
        }

        .chip.live .dot {
            background: #ea4335;
            box-shadow: 0 0 0 6px rgba(234,67,53,.18);
        }

    /* Live transcript box */
    .transcript {
        border: 1px solid var(--border);
        background: #fff;
        border-radius: var(--radius);
        padding: 14px 16px;
        min-height: 66px;
        font-size: 15px;
        color: var(--ink);
    }

    .hint {
        color: var(--sub);
        font-size: 13px;
    }

    /* Inputs */
    .field label {
        display: block;
        font-size: 13px;
        color: var(--sub);
        margin-bottom: 6px;
    }

    .input {
        width: 100%;
        background: #fff;
        border: 1px solid var(--border);
        border-radius: 12px;
        padding: 12px 14px;
        font-size: 15px;
        outline: none;
        transition: box-shadow .15s ease, border-color .15s ease;
    }

        .input:focus {
            border-color: var(--primary);
            box-shadow: var(--focus);
        }

    .audio {
        width: 100%;
        height: 42px;
        border-radius: 10px;
        background: #f1f3f4;
    }

    /* Analyze block */
    .hr {
        height: 1px;
        background: var(--border);
        border: 0;
        margin: 6px 0 14px;
    }

    .footer-note {
        color: var(--sub);
        font-size: 12px;
        margin-top: 8px;
    }
</style>

<div class="container">
    <div class="page-title">Pronunciation Practice</div>

    <div class="card">
        <div class="controls" style="margin-bottom:12px;">
            <button id="recordBtn" type="button" class="btn">
                <svg width="18" height="18" viewBox="0 0 24 24" style="vertical-align:middle;margin-right:6px;">
                    <path fill="currentColor" d="M12 14a3 3 0 0 0 3-3V6a3 3 0 0 0-6 0v5a3 3 0 0 0 3 3Zm5-3a5 5 0 0 1-10 0H5a7 7 0 0 0 14 0h-2Z" />
                    <path fill="currentColor" d="M11 19h2v3h-2z" />
                </svg>
                Record
            </button>
            <button id="stopBtn" type="button" class="btn btn-outline" disabled>Stop</button>
            <div id="statusChip" class="chip" title="Microphone status"><span class="dot"></span> Idle</div>
            <div class="hint">Speak clearly. We’ll show what you’re saying in real time.</div>
        </div>

        <div class="transcript" id="liveText">You're saying:</div>
        <div style="margin-top:12px;">
            <audio id="audioPlayback" class="audio" controls></audio>
        </div>
    </div>

    <div class="card">
        <form id="uploadForm" method="post" enctype="multipart/form-data" asp-action="Analyze">
            @Html.AntiForgeryToken()
            <div class="field" style="margin-bottom:12px;">
                <label>Reference Text (câu chuẩn để so sánh):</label>
                <input asp-for="ReferenceText" class="input" placeholder="e.g. Hello, my name is David." />
                <span asp-validation-for="ReferenceText" class="text-danger"></span>
            </div>
            <input type="file" id="audioFile" name="AudioFile" hidden />
            <input type="hidden" id="spokenText" name="SpokenText" />
            <hr class="hr" />
            <div class="controls" style="justify-content:space-between;">
                <div class="hint">When you stop recording, your audio appears above. Then click Analyze.</div>
                <button type="submit" id="submitBtn" class="btn" disabled>Analyze</button>
            </div>
            <div class="footer-note">We don't store your audio. It’s used only to analyze your pronunciation.</div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // ====== Recorder + Live Transcript ======
        let mediaRecorder, recognition;
        let audioChunks = [], finalText = '';
        const recordBtn  = document.getElementById('recordBtn');
        const stopBtn    = document.getElementById('stopBtn');
        const submitBtn  = document.getElementById('submitBtn');
        const audioEl    = document.getElementById('audioPlayback');
        const fileInput  = document.getElementById('audioFile');
        const liveTextEl = document.getElementById('liveText');
        const spokenText = document.getElementById('spokenText');
        const statusChip = document.getElementById('statusChip');

        function setChip(state){
            if(state === 'live'){
                statusChip.classList.add('live');
                statusChip.querySelector('.dot').style.background = '#ea4335';
                statusChip.lastChild.nodeValue = ' Live';
            } else {
                statusChip.classList.remove('live');
                statusChip.querySelector('.dot').style.background = '';
                statusChip.lastChild.nodeValue = ' Idle';
            }
        }

        function chooseMime() {
            if (MediaRecorder.isTypeSupported('audio/webm;codecs=opus')) return 'audio/webm;codecs=opus';
            if (MediaRecorder.isTypeSupported('audio/ogg;codecs=opus'))  return 'audio/ogg;codecs=opus';
            return '';
        }
        function extFromMime(mime) {
            if ((mime || '').includes('ogg'))  return 'ogg';
            if ((mime || '').includes('webm')) return 'webm';
            return 'webm';
        }

        function startSpeechRecognition() {
            const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
            if (!SR) { liveTextEl.textContent = "Browser doesn't support live captions."; return; }
            recognition = new SR();
            recognition.lang = "en-US";  // đổi ngôn ngữ nếu cần
            recognition.continuous = true;
            recognition.interimResults = true;
            finalText = ""; liveTextEl.textContent = "You're saying:";
            setChip('live');

            recognition.onresult = (e) => {
                let interim = '';
                for (let i = e.resultIndex; i < e.results.length; ++i) {
                    const transcript = e.results[i][0].transcript;
                    if (e.results[i].isFinal) finalText += transcript + ' ';
                    else interim += transcript;
                }
                liveTextEl.textContent = "You're saying: " + (finalText + interim).trim();
            };
            recognition.onerror = (e) => console.warn('SpeechRecognition error:', e.error);
            recognition.start();
        }

        function stopSpeechRecognition() {
            if (recognition) {
                try { recognition.stop(); } catch {}
                setChip('idle');
                spokenText.value = (finalText || '').trim();
            }
        }

        recordBtn.onclick = async () => {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                const mime = chooseMime();
                mediaRecorder = mime ? new MediaRecorder(stream, { mimeType: mime }) : new MediaRecorder(stream);

                audioChunks = [];
                submitBtn.disabled = true;
                stopBtn.disabled = false;
                recordBtn.disabled = true;

                mediaRecorder.ondataavailable = e => { if (e.data && e.data.size > 0) audioChunks.push(e.data); };
                mediaRecorder.onstop = () => {
                    const usedMime = mediaRecorder.mimeType || mime || 'audio/webm';
                    const blob = new Blob(audioChunks, { type: usedMime });
                    const url = URL.createObjectURL(blob);
                    audioEl.src = url;

                    const ext = extFromMime(usedMime);
                    const file = new File([blob], `recording.${ext}`, { type: usedMime });

                    const dt = new DataTransfer();
                    dt.items.add(file);
                    fileInput.files = dt.files;

                    submitBtn.disabled = false;
                    recordBtn.disabled = false;
                    stopBtn.disabled = true;
                };

                mediaRecorder.start();
                startSpeechRecognition();
            } catch (err) {
                console.error(err);
                alert('Cannot access microphone. Please check permission.');
            }
        };

        stopBtn.onclick = () => {
            try { if (mediaRecorder && mediaRecorder.state !== 'inactive') mediaRecorder.stop(); }
            finally { stopSpeechRecognition(); stopBtn.disabled = true; }
        };
    </script>
}
